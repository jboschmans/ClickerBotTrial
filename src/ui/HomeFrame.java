/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;
import domain.DomainController;
import domain.Event;
import java.awt.Color;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.AbstractTableModel;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
/**
 *
 * @author Gebruiker
 */
public class HomeFrame extends javax.swing.JFrame implements NativeKeyListener {

    public AbstractTableModel tm;
    public int progressRun = 0, progressTotal = 0;
    public boolean goon = true;
    private Timer t;
    private List<Integer> pressed = new ArrayList<>();
    public Thread r = new Thread()
        {

            @Override
            public void run()
            {
                try
                {
                    while(true)
                    {
                        jProgressBarRun.setValue(progressRun);
                        jProgressBarTotal.setValue(progressTotal);
                        jLabelRunPerc.setText(String.format("%d%%", progressRun));
                        jLabelTotalPerc.setText(String.format("%d%%", progressTotal));
                        Thread.sleep(600);
                    }
                } catch(Exception e){};
            }
            
        };
    
    public HomeFrame(){
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/images/icon16.png")).getImage());
        tm = new AbstractTableModel()
        {
            @Override
            public String getColumnName(int col)
            {
                return DomainController.getKolomNamen()[col].toString();
            }
            @Override
            public int getRowCount()
            {
                return DomainController.getData().length;
            }
            @Override
            public int getColumnCount()
            {
                return DomainController.getKolomNamen().length;
            }
            @Override
            public Object getValueAt(int row, int col)
            {
                return DomainController.getData()[row][col];
            }
            @Override
            public boolean isCellEditable(int row, int col)
            {
                return false;
            }
            @Override
            public void setValueAt(Object value, int row, int col)
            {
                DomainController.getData()[row][col] = value;
                fireTableCellUpdated(row,col);
            }
        };
        jTableEvents.setModel(tm);
        
        r.setPriority(6);
        r.start();
        
        try
        {
            GlobalScreen.registerNativeHook();
        }
        catch (NativeHookException ex)
        {
            ex.printStackTrace();
            System.exit(1);
        }
        GlobalScreen.getInstance().addNativeKeyListener(this);
    }
    
    public void updateTable()
    {
        tm.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEvents = new javax.swing.JTable();
        jProgressBarRun = new javax.swing.JProgressBar();
        jProgressBarTotal = new javax.swing.JProgressBar();
        jLabelRunPerc = new javax.swing.JLabel();
        jLabelTotalPerc = new javax.swing.JLabel();
        jButtonAddClick = new javax.swing.JButton();
        jButtonAddMouseMove = new javax.swing.JButton();
        jButtonAddMouseMovePlusClick = new javax.swing.JButton();
        jButtonPlay = new javax.swing.JButton();
        jTextFieldLoop = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jButtonModify = new javax.swing.JButton();
        jButtonAddOneKey = new javax.swing.JButton();
        jButtonDown = new javax.swing.JButton();
        jButtonUp = new javax.swing.JButton();
        jButtonReleaseAllKeys = new javax.swing.JButton();
        jButtonInputString = new javax.swing.JButton();
        jButtonAddColor = new javax.swing.JButton();
        jButtonAddLoop = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ClickerBot");
        setResizable(false);

        jTableEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableEvents.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableEvents.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jTableEvents);

        jLabelRunPerc.setText("0%");

        jLabelTotalPerc.setText("0%");

        jButtonAddClick.setText("Add Click");
        jButtonAddClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddClickActionPerformed(evt);
            }
        });

        jButtonAddMouseMove.setText("Add MouseMove");
        jButtonAddMouseMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddMouseMoveActionPerformed(evt);
            }
        });

        jButtonAddMouseMovePlusClick.setText("Add MouseMove + Click");
        jButtonAddMouseMovePlusClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddMouseMovePlusClickActionPerformed(evt);
            }
        });

        jButtonPlay.setText("Play (F12 to stop)");
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });

        jTextFieldLoop.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldLoop.setText("1");
        jTextFieldLoop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldLoopKeyReleased(evt);
            }
        });

        jLabel1.setText("Loop:");

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonModify.setText("Modify");
        jButtonModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifyActionPerformed(evt);
            }
        });

        jButtonAddOneKey.setText("Add One Key");
        jButtonAddOneKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddOneKeyActionPerformed(evt);
            }
        });

        jButtonDown.setText("Down");
        jButtonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownActionPerformed(evt);
            }
        });

        jButtonUp.setText("Up");
        jButtonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpActionPerformed(evt);
            }
        });

        jButtonReleaseAllKeys.setText("Release All Keys");
        jButtonReleaseAllKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReleaseAllKeysActionPerformed(evt);
            }
        });

        jButtonInputString.setText("Input String");
        jButtonInputString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInputStringActionPerformed(evt);
            }
        });

        jButtonAddColor.setText("Wait For Color");
        jButtonAddColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddColorActionPerformed(evt);
            }
        });

        jButtonAddLoop.setText("Add Loop");
        jButtonAddLoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddLoopActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        jMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNew.setText("New");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemNew);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Quit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu3.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        menuBar.add(jMenu3);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jProgressBarTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jProgressBarRun, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelTotalPerc, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                                    .addComponent(jLabelRunPerc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonPlay, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                                    .addComponent(jButtonModify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonAddClick, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAddMouseMove, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAddMouseMovePlusClick, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAddOneKey, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jButtonReleaseAllKeys, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonInputString, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAddLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonAddColor, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jButtonAddClick, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAddMouseMove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddOneKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAddMouseMovePlusClick, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonReleaseAllKeys, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonInputString, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAddLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAddColor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBarRun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelRunPerc, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBarTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTotalPerc)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldLoop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonModify, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to quit? All unsaved progress will be lost.","Quit",JOptionPane.YES_NO_OPTION) == 0)
            System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButtonAddClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddClickActionPerformed
        AddClickFrame acf = new AddClickFrame();
        acf.setLocationRelativeTo(null);
        acf.setVisible(true);
    }//GEN-LAST:event_jButtonAddClickActionPerformed

    private void jButtonAddMouseMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddMouseMoveActionPerformed
        AddMoveMouseFrame ammf = new AddMoveMouseFrame();
        ammf.setLocationRelativeTo(null);
        ammf.setVisible(true);
    }//GEN-LAST:event_jButtonAddMouseMoveActionPerformed

    private void jButtonAddMouseMovePlusClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddMouseMovePlusClickActionPerformed
        AddMoveMousePlusClickFrame ammpcf = new AddMoveMousePlusClickFrame();
        ammpcf.setLocationRelativeTo(null);
        ammpcf.setVisible(true);
    }//GEN-LAST:event_jButtonAddMouseMovePlusClickActionPerformed

    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
        //Controle
        ArrayList<Integer> insideLoops = new ArrayList<>();
        for (Event e : DomainController.er.getEventList())
        {
            if (e.getType() == Event.Type.LOOP)
            {
                e.setNumberOfLoopsCompleted(0);
                insideLoops.add(e.getNumberOfLoopEvent());
            }
            else if (e.getType() == Event.Type.LOOPEND)
            {
                int number = -1;
                for (int i = 0; i < insideLoops.size(); i++)
                {
                    if (insideLoops.get(i) == e.getNumberOfLoopEvent())
                    {
                        number = i;
                        break;
                    }
                }
                if(number == -1)
                {
                    JOptionPane.showMessageDialog(null, "Start of loop " + e.getNumberOfLoopEvent() + " is missing.","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                else
                {
                    insideLoops.remove(number);
                }
            }
        }
        if (insideLoops.size() > 0)
        {
            for (int i : insideLoops)
            {
                JOptionPane.showMessageDialog(null,"End of loop " + i + " is missing.");
            }
            return;
        }
        Thread playIt = new Thread()
        {
            @Override
            public void run()
            {
                try
                {
                    jButtonPlay.setEnabled(false);
                    pressed.clear();
                    Robot robot = new Robot();
                    progressRun = 0;
                    progressTotal = 0;
                    int loops = Integer.parseInt(jTextFieldLoop.getText());
                    ArrayList<domain.Event> list = DomainController.er.getEventList();
                    goon = true;
                    for (int i = 0; i < loops; i++)
                    {
                        for (Event event : DomainController.er.getEventList())
                            if (event.getType() == domain.Event.Type.LOOP)
                                event.setNumberOfLoopsCompleted(0);
                        
                        for (int j = 0; j < list.size(); j++)
                        {
                            switch(list.get(j).getType())
                            {
                                case CLICK:
                                    if (list.get(j).isLeftClick())
                                    {
                                        robot.mousePress(InputEvent.BUTTON1_MASK);
                                        robot.mouseRelease(InputEvent.BUTTON1_MASK);
                                    }
                                    else if (list.get(j).isMiddleClick())
                                    {
                                        robot.mousePress(InputEvent.BUTTON2_MASK);
                                        robot.mouseRelease(InputEvent.BUTTON2_MASK);
                                    }
                                    else if (list.get(j).isRightClick())
                                    {
                                        robot.mousePress(InputEvent.BUTTON3_MASK);
                                        robot.mouseRelease(InputEvent.BUTTON3_MASK);
                                    }
                                    break;
                                case MOVEMOUSE:
                                    robot.mouseMove(list.get(j).getMouseX(), list.get(j).getMouseY());
                                    break;
                                case MOVEMOUSEPLUSCLICK:
                                    robot.mouseMove(list.get(j).getMouseX(), list.get(j).getMouseY());
                                    if (list.get(j).isLeftClick())
                                    {
                                        robot.mousePress(InputEvent.BUTTON1_MASK);
                                        robot.mouseRelease(InputEvent.BUTTON1_MASK);
                                    }
                                    else if (list.get(j).isMiddleClick())
                                    {
                                        robot.mousePress(InputEvent.BUTTON2_MASK);
                                        robot.mouseRelease(InputEvent.BUTTON2_MASK);
                                    }
                                    else if (list.get(j).isRightClick())
                                    {
                                        robot.mousePress(InputEvent.BUTTON3_MASK);
                                        robot.mouseRelease(InputEvent.BUTTON3_MASK);
                                    }
                                    break;
                                case ONEKEY:
                                    robot.keyPress(DomainController.calcOneKeyEvent(list.get(j).getKey()));
                                    robot.keyRelease(DomainController.calcOneKeyEvent(list.get(j).getKey()));
                                    break;
                                case ONEKEYPRESS:
                                    robot.keyPress(DomainController.calcOneKeyEvent(list.get(j).getKey()));
                                    pressed.add(DomainController.calcOneKeyEvent(list.get(j).getKey()));
                                    break;
                                case ONEKEYRELEASE:
                                    int u = DomainController.calcOneKeyEvent(list.get(j).getKey());
                                    robot.keyRelease(u);
                                    for (int o = 0; o < pressed.size(); o++)
                                    {
                                        if (pressed.get(o) == u)
                                        {
                                            pressed.remove(o);
                                        }
                                    }
                                    break;
                                case RELEASEALLKEYS:
                                    for (int o : pressed)
                                    {
                                        robot.keyRelease(o);
                                    }
                                    pressed.clear();
                                    break;
                                case STRING:
                                    String s = list.get(j).getString();
                                    char[] chars = s.toCharArray();
                                    boolean shift;
                                    for (char b : chars)
                                    {
                                        shift = false;
                                        char c = b;
                                        if (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'O' || c == 'P' || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'U' || c == 'V' || c == 'W' || c == 'X' || c == 'Y' || c == 'Z')
                                        {
                                            shift = true;
                                            String g = String.format("%c", c).toLowerCase();
                                            c = g.charAt(0);
                                        }
                                        if (shift)
                                            robot.keyPress(KeyEvent.VK_SHIFT);
                                        robot.keyPress(DomainController.calcStringKeyEvent(c));
                                        robot.keyRelease(DomainController.calcStringKeyEvent(c));
                                        if (shift)
                                            robot.keyRelease(KeyEvent.VK_SHIFT);
                                    }
                                break;
                                case WAITFORCOLOR:
                                    while(goon)
                                    {
                                        if (list.get(j).getColor().toString().equals(robot.getPixelColor(list.get(j).getMouseX(), list.get(j).getMouseY()).toString()))
                                            break;
                                        Thread.sleep(200);
                                    }
                                    break;
                                case LOOPEND:
                                    int loopEvent = list.get(j).getNumberOfLoopEvent();
                                    int indexStartLoop = -1;
                                    int m;
                                    for (m = 0; m < j; m++)
                                    {
                                        if (list.get(m).getNumberOfLoopEvent() == loopEvent)
                                        {
                                            indexStartLoop = m;
                                            break;
                                        }
                                    }
                                    list.get(m).setNumberOfLoopsCompleted(list.get(m).getNumberOfLoopsCompleted()+1);
                                    if (list.get(m).getNumberOfLoopsCompleted() < list.get(m).getNumberOfLoopTimes())
                                    {
                                        j = indexStartLoop;
                                    }
                                    break;
                                default:
                                    break;
                            }
                            long pause = (long) (Math.random()*(list.get(j).getMaxPause()-list.get(j).getMinPause())+list.get(j).getMinPause());
                            while(pause > 400)
                            {
                                Thread.sleep(400);
                                pause-=400;
                                if (!goon)
                                {
                                    return;
                                }
                            }
                            Thread.sleep(pause);
                            if (!goon)
                                {
                                    return;
                                }
                            progressRun = (int) ((j+1)*100/list.size());
                        }
                        progressTotal = (int) ((i+1)*100/loops);
                    }
                    JOptionPane.showMessageDialog(null, "The process has completed successfully.", "Completed", JOptionPane.INFORMATION_MESSAGE);
                    jButtonPlay.setEnabled(true);
                }
                catch(Exception e) {JOptionPane.showMessageDialog(null, "Something went wrong.", "Error", JOptionPane.ERROR_MESSAGE); jButtonPlay.setEnabled(true);}
            }
        };
        playIt.start();
        
    }//GEN-LAST:event_jButtonPlayActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        if (jTableEvents.getSelectedRows().length <= 0)
        {
            JOptionPane.showMessageDialog(null, "You must select an event first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            int[] i = jTableEvents.getSelectedRows();
            int choice;
            if (i.length == 1)
                choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this event?", "Delete", JOptionPane.YES_NO_OPTION);
            else
                choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete these events?", "Delete", JOptionPane.YES_NO_OPTION);
            if (choice == 0)
            {
                for (int j = i.length-1; j >= 0; j--)
                {
                    DomainController.deleteEvent(i[j]);
                }
                tm.fireTableDataChanged();
            }
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifyActionPerformed
        if (jTableEvents.getSelectedRows().length <= 0)
        {
            JOptionPane.showMessageDialog(null, "You must select an event first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (jTableEvents.getSelectedRows().length > 1)
        {
            JOptionPane.showMessageDialog(null, "You can only modify one event at a time.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            int[] i = jTableEvents.getSelectedRows();
            domain.Event e = DomainController.er.getEventList().get(i[0]);
            
            switch (e.getType())
            {
                case CLICK:
                    AddClickFrame acf = new AddClickFrame(i[0],(e.isLeftClick())?"left":(e.isMiddleClick())?"middle":"right", e.getMinPause(), e.getMaxPause());
                    acf.setLocationRelativeTo(null);
                    acf.setVisible(true);
                    break;
                case MOVEMOUSE:
                    AddMoveMouseFrame ammf = new AddMoveMouseFrame(i[0], e.getMinPause(), e.getMaxPause(), e.getMouseX(), e.getMouseY());
                    ammf.setLocationRelativeTo(null);
                    ammf.setVisible(true);
                    break;
                case MOVEMOUSEPLUSCLICK:
                    AddMoveMousePlusClickFrame ammpcf = new AddMoveMousePlusClickFrame(i[0],(e.isLeftClick())?"left":(e.isMiddleClick())?"middle":"right", e.getMinPause(), e.getMaxPause(), e.getMouseX(), e.getMouseY());
                    ammpcf.setLocationRelativeTo(null);
                    ammpcf.setVisible(true);
                    break;
                case ONEKEY:
                case ONEKEYPRESS:
                case ONEKEYRELEASE:
                    AddOneKeyFrame aokf = new AddOneKeyFrame(i[0],e.getType(),e.getKey(),e.getMinPause(),e.getMaxPause());
                    aokf.setLocationRelativeTo(null);
                    aokf.setVisible(true);
                    break;
                case RELEASEALLKEYS:
                    long minp, maxp;
                    int a = JOptionPane.showConfirmDialog(null, "Do you want a random pause after releasing all keys?", "Release All Keys", JOptionPane.YES_NO_CANCEL_OPTION);
                    if (a == 0)
                    {
                        minp = Long.parseLong(JOptionPane.showInputDialog(null,"How long would you like the shortest pause to last? (ms)",e.getMinPause()));
                        maxp = Long.parseLong(JOptionPane.showInputDialog(null,"How long would you like the longest pause to last? (ms)",e.getMaxPause()));
                    }
                    else if (a == 1)
                    {
                        minp = Long.parseLong(JOptionPane.showInputDialog(null,"How long would you like the pause to last? (ms)",e.getMinPause()));
                        maxp = minp;
                    }
                    else
                        return;
                    DomainController.er.getEventList().get(i[0]).setMinPause(minp);
                    DomainController.er.getEventList().get(i[0]).setMaxPause(maxp);
                    tm.fireTableDataChanged();
                    break;
                case STRING:
                    InputStringFrame isf = new InputStringFrame(i[0],e.getString(), e.getMinPause(), e.getMaxPause());
                    isf.setLocationRelativeTo(null);
                    isf.setVisible(true);
                    break;
                case WAITFORCOLOR:
                    AddColorFrame acof = new AddColorFrame(i[0],e.getMinPause(),e.getMaxPause(),e.getMouseX(),e.getMouseY(),e.getColor());
                    acof.setLocationRelativeTo(null);
                    acof.setVisible(true);
                    break;
                case LOOP:
                    int number ;
                    boolean gevonden = false;
                    int loopEvent = 0;
                    while (!gevonden)
                    {
                        loopEvent++;
                        gevonden = true;
                        for (Event ev : DomainController.er.getEventList())
                        {
                            if (ev.getNumberOfLoopEvent() == loopEvent)
                            {
                                gevonden = false;
                                break;
                            }
                        }
                    }
                    String s = JOptionPane.showInputDialog(null, "How many times would you like to loop?");
                    int numberOfLoops = 0;
                    try
                    {
                        numberOfLoops = Integer.parseInt(s);
                        if (numberOfLoops < 1)
                            throw new Exception();
                    }
                    catch(Exception exc)
                    {
                        JOptionPane.showMessageDialog(null, "You didn't enter a valid number of loops.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    DomainController.er.getEventList().get(i[0]).setNumberOfLoopTimes(numberOfLoops);
                    tm.fireTableDataChanged();
                    break;
                default:
                    break;
            }
            
        }
    }//GEN-LAST:event_jButtonModifyActionPerformed

    private void jButtonAddOneKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddOneKeyActionPerformed
        AddOneKeyFrame aokf = new AddOneKeyFrame();
        aokf.setLocationRelativeTo(null);
        aokf.setVisible(true);
    }//GEN-LAST:event_jButtonAddOneKeyActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        DomainController.save();
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        DomainController.open();
        jTextFieldLoop.setText(String.format("%d",DomainController.er.getNumberOfLoops()));
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpActionPerformed
        if (jTableEvents.getSelectedRows().length <= 0)
        {
            JOptionPane.showMessageDialog(null, "You must select an event first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (jTableEvents.getSelectedRows()[0] == 0)
        {
            
        }
        else
        {
            int[] i = jTableEvents.getSelectedRows();
            int replaced = i[0]-1;
            
            domain.Event e = DomainController.er.getEventList().get(replaced);
            for (int j : i)
            {
                DomainController.er.getEventList().set(j-1, DomainController.er.getEventList().get(j));
            }
            DomainController.er.getEventList().set(i[i.length-1], e);
            tm.fireTableDataChanged();
            jTableEvents.setRowSelectionInterval(i[0]-1, i[i.length-1]-1);
        }
    }//GEN-LAST:event_jButtonUpActionPerformed

    private void jButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownActionPerformed
        if (jTableEvents.getSelectedRows().length <= 0)
        {
            JOptionPane.showMessageDialog(null, "You must select an event first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (jTableEvents.getSelectedRows()[jTableEvents.getSelectedRows().length-1] == DomainController.er.getEventList().size()-1)
        {
            
        }
        else
        {
            int[] i = jTableEvents.getSelectedRows();
            int replaced = i[i.length-1]+1;
            
            domain.Event e = DomainController.er.getEventList().get(replaced);
            for (int j = i.length-1; j >= 0; j--)
            {
                DomainController.er.getEventList().set(i[j]+1, DomainController.er.getEventList().get(i[j]));
            }
            DomainController.er.getEventList().set(i[0], e);
            tm.fireTableDataChanged();
            jTableEvents.setRowSelectionInterval(i[0]+1, i[i.length-1]+1);
        }
    }//GEN-LAST:event_jButtonDownActionPerformed

    private void jButtonReleaseAllKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReleaseAllKeysActionPerformed
        long minp, maxp;
        int a = JOptionPane.showConfirmDialog(null, "Do you want a random pause after releasing all keys?", "Release All Keys", JOptionPane.YES_NO_CANCEL_OPTION);
        if (a == 0)
        {
            minp = Long.parseLong(JOptionPane.showInputDialog(null,"How long would you like the shortest pause to last? (ms)"));
            maxp = Long.parseLong(JOptionPane.showInputDialog(null,"How long would you like the longest pause to last? (ms)"));
        }
        else if (a == 1)
        {
            minp = Long.parseLong(JOptionPane.showInputDialog(null,"How long would you like the pause to last? (ms)"));
            maxp = minp;
        }
        else
            return;
        DomainController.addEvent(Event.Type.RELEASEALLKEYS, minp, maxp, -1, -1, false, false, false, "", "", Color.white, 0, 0);
        tm.fireTableDataChanged();
    }//GEN-LAST:event_jButtonReleaseAllKeysActionPerformed

    private void jButtonInputStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInputStringActionPerformed
        InputStringFrame isf = new InputStringFrame();
        isf.setLocationRelativeTo(null);
        isf.setVisible(true);
    }//GEN-LAST:event_jButtonInputStringActionPerformed

    private void jTextFieldLoopKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldLoopKeyReleased
        try
        {
            int loops = Integer.parseInt(jTextFieldLoop.getText());
            DomainController.er.setNumberOfLoops(loops);
        }
        catch (Exception exc)
        {
            System.out.println("Not a correct number of loops.");
        }
    }//GEN-LAST:event_jTextFieldLoopKeyReleased

    private void jButtonAddColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddColorActionPerformed
        AddColorFrame acof = new AddColorFrame();
        acof.setLocationRelativeTo(null);
        acof.setVisible(true);
    }//GEN-LAST:event_jButtonAddColorActionPerformed

    private void jButtonAddLoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddLoopActionPerformed
        boolean gevonden = false;
        int loopEvent = 0;
        while (!gevonden)
        {
            loopEvent++;
            gevonden = true;
            for (Event e : DomainController.er.getEventList())
            {
                if (e.getNumberOfLoopEvent() == loopEvent)
                {
                    gevonden = false;
                    break;
                }
            }
        }
        String s = JOptionPane.showInputDialog(null, "How many times would you like to loop?");
        int numberOfLoops = 0;
        try
        {
            numberOfLoops = Integer.parseInt(s);
            if (numberOfLoops < 1)
                throw new Exception();
        }
        catch(Exception exc)
        {
            JOptionPane.showMessageDialog(null, "You didn't enter a valid number of loops.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DomainController.addEvent(Event.Type.LOOP, 0, 0, 0, 0, false, false, false, "", "", Color.white, numberOfLoops, loopEvent);
        DomainController.addEvent(Event.Type.LOOPEND, 0, 0, 0, 0, false, false, false, "", "", Color.white, 0, loopEvent);
        tm.fireTableDataChanged();
    }//GEN-LAST:event_jButtonAddLoopActionPerformed

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to create a new file? All unsaved progress will be lost.", "New File", JOptionPane.YES_NO_OPTION) == 0)
        {
            DomainController.er.getEventList().clear();
            updateTable();
        }
    }//GEN-LAST:event_jMenuItemNewActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        HelpFrame hf = new HelpFrame();
        hf.setLocationRelativeTo(null);
        hf.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButtonAddClick;
    private javax.swing.JButton jButtonAddColor;
    private javax.swing.JButton jButtonAddLoop;
    private javax.swing.JButton jButtonAddMouseMove;
    private javax.swing.JButton jButtonAddMouseMovePlusClick;
    private javax.swing.JButton jButtonAddOneKey;
    public javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDown;
    private javax.swing.JButton jButtonInputString;
    public javax.swing.JButton jButtonModify;
    public javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonReleaseAllKeys;
    private javax.swing.JButton jButtonUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelRunPerc;
    private javax.swing.JLabel jLabelTotalPerc;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JProgressBar jProgressBarRun;
    private javax.swing.JProgressBar jProgressBarTotal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTableEvents;
    private javax.swing.JTextField jTextFieldLoop;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    // End of variables declaration//GEN-END:variables

    

    
    
    @Override
    public void nativeKeyPressed(NativeKeyEvent e) {
        if (e.getKeyCode() == NativeKeyEvent.VC_F12)
        {
            if (!this.jButtonPlay.isEnabled())
            {
                domain.DomainController.hf.goon = false;
                JOptionPane.showMessageDialog(null, "The process was stopped by the user.", "Stopped", JOptionPane.INFORMATION_MESSAGE);
                domain.DomainController.hf.jButtonPlay.setEnabled(true);
                domain.DomainController.hf.progressRun = 0;
                domain.DomainController.hf.progressTotal = 0;
            }
        }
    }

    @Override
    public void nativeKeyReleased(NativeKeyEvent e) {
        
    }

    @Override
    public void nativeKeyTyped(NativeKeyEvent e) {
        
    }

}